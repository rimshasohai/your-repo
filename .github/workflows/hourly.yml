name: Hourly AQI Logger

on:
  schedule:
    - cron: '0 * * * *'  # Every hour at 00 min UTC
  workflow_dispatch:

jobs:
  log-aqi:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Repo
        uses: actions/checkout@v4

      - name: 🐍 Set Up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install Required Libraries
        run: pip install pandas requests

      - name: 🚀 Run Inline AQI Logging Script
        run: |
          python - <<EOF
          import os
          import requests
          import pandas as pd
          from datetime import datetime

          # ✅ Embedded API Keys (⚠️ safe only for private repos)
          AQICN_TOKEN = '2eb7e59a27fec6826892da8d9b3f9ff95e6c573e'
          OPENWEATHER_KEY = 'ee88310481e99a7843bdedc0cca27fd1'
          CITY = 'karachi'
          COUNTRY = 'PK'

          def get_aqi():
              try:
                  url = f'https://api.waqi.info/feed/{CITY}/?token={AQICN_TOKEN}'
                  res = requests.get(url).json()
                  if res.get("status") != "ok":
                      return {}
                  iaqi = res["data"].get("iaqi", {})
                  return {
                      "aqi": res["data"].get("aqi"),
                      "pm25": iaqi.get("pm25", {}).get("v"),
                      "pm10": iaqi.get("pm10", {}).get("v"),
                      "co": iaqi.get("co", {}).get("v"),
                      "no2": iaqi.get("no2", {}).get("v"),
                      "o3": iaqi.get("o3", {}).get("v"),
                      "so2": iaqi.get("so2", {}).get("v")
                  }
              except Exception as e:
                  print("AQI Error:", e)
                  return {}

          def get_weather():
              try:
                  url = f'http://api.openweathermap.org/data/2.5/weather?q={CITY},{COUNTRY}&appid={OPENWEATHER_KEY}&units=metric'
                  res = requests.get(url).json()
                  return {
                      "temp": res["main"].get("temp"),
                      "humidity": res["main"].get("humidity"),
                      "pressure": res["main"].get("pressure"),
                      "wind_speed": res["wind"].get("speed")
                  }
              except Exception as e:
                  print("Weather Error:", e)
                  return {}

          def log_data():
              now = datetime.utcnow()
              date_str = now.strftime("%Y-%m-%d")
              time_str = now.strftime("%H:%M:%S")
              hour = now.hour + 1  # 1-24 format

              folder = f"data/{date_str}"
              os.makedirs(folder, exist_ok=True)
              filepath = f"{folder}/karachi.csv"

              aqi = get_aqi()
              weather = get_weather()

              if not aqi or not weather:
                  print("❌ Failed to fetch data.")
                  return

              row = {
                  "date": date_str,
                  "time": time_str,
                  "hour": hour,
                  **aqi,
                  **weather
              }

              df = pd.DataFrame([row])
              if os.path.exists(filepath):
                  df.to_csv(filepath, mode='a', index=False, header=False)
              else:
                  df.to_csv(filepath, index=False)

              print(f"✅ Logged data for hour {hour} → {filepath}")

          log_data()
          EOF

      - name: 💾 Commit and Push
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add data/
          git commit -m "📊 Hourly AQI update - $(date -u)" || echo "No changes"
          git push

